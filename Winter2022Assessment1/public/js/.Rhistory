Decentering.8 ~~ r1*Decentering.8
Decentering.11 ~~ r1*Decentering.11
Decentering.15 ~~ r1*Decentering.15
Decentering.18 ~~ r1*Decentering.18
Reappraisal.1 ~~ r2*Reappraisal.1
Reappraisal.4 ~~ r2*Reappraisal.4
Reappraisal.8 ~~ r2*Reappraisal.8
Reappraisal.11 ~~ r2*Reappraisal.11
Reappraisal.15 ~~ r2*Reappraisal.15
Reappraisal.18 ~~ r2*Reappraisal.18
WellBeing.1 ~~ r3*WellBeing.1
WellBeing.4 ~~ r3*WellBeing.4
WellBeing.8 ~~ r3*WellBeing.8
WellBeing.11 ~~ r3*WellBeing.11
WellBeing.15 ~~ r3*WellBeing.15
WellBeing.18 ~~ r3*WellBeing.18
#covariances between observed variables, decentering reappraisal and wellbeing, at each measurement
Decentering.1 ~~ r4*Reappraisal.1
Decentering.4 ~~ r4*Reappraisal.4
Decentering.8 ~~ r4*Reappraisal.8
Decentering.11 ~~ r4*Reappraisal.11
Decentering.15 ~~ r4*Reappraisal.15
Decentering.18 ~~ r4*Reappraisal.18
Decentering.1 ~~ r5*WellBeing.1
Decentering.4 ~~ r5*WellBeing.4
Decentering.8 ~~ r5*WellBeing.8
Decentering.11 ~~ r5*WellBeing.11
Decentering.15 ~~ r5*WellBeing.15
Decentering.18 ~~ r5*WellBeing.18
Reappraisal.1 ~~ r6*WellBeing.1
Reappraisal.4 ~~ r6*WellBeing.4
Reappraisal.8 ~~ r6*WellBeing.8
Reappraisal.11 ~~ r6*WellBeing.11
Reappraisal.15 ~~ r6*WellBeing.15
Reappraisal.18 ~~ r6*WellBeing.18
###regression
s_reap ~ b*s_dec
s_wb ~ c*s_reap
#direct effect
s_dec ~ a1*ActiveCondition
s_reap ~ a2*ActiveCondition
s_wb ~ a3*ActiveCondition
#indirect effect
decentering.reappraisal.wellbeing := b*c
group.reappraisal.wellbeing := a2*c
group.decentering.through.reappraisal.to.wellbeing:=a1*b*c
'
#use sem()
fit.model1_growth <- sem(model1_growth,
data=model1_wide,
missing         = "fiml",
estimator       = "ml"
)
summary(fit.model1_growth, standardized = TRUE, fit.measures = TRUE)
diagram.h1 = semPaths(fit.model1_growth, what= "std", whatLabels="std", rotation=1,
nCharNodes=0, label.cex=2, trans=FALSE, fade=FALSE)
#use growth()
growthCurveModel1 = growth(model1_growth, data = model1_wide)
summary(growthCurveModel1)
diagram.h1 = semPaths(growthCurveModel1, what= "std", whatLabels="std", rotation=1,
nCharNodes=0, label.cex=2, trans=FALSE, fade=FALSE)
###MC vs. AC
model1_wideMC = model1_wide[model1_wide$Condition=="AC" | model1_wide$Condition=="MC",]
h1.analysis = sem(model1_growth, data = model1_wideMC)
summary(h1.analysis, fit.measures=TRUE, standardized=TRUE)
diagram.h1MC = semPaths(h1.analysis, what= "std", whatLabels="std", rotation=3,
nCharNodes=0, label.cex=2, trans=FALSE, fade=FALSE)
sourcedir = "~/Desktop/MPAS_Fall2021/"
# Check if required packages are installed ----
packages <- c("tidyverse", "dplyr", "plyr", "tidyr", #data manipulation
"ggplot2", "ggpubr", "ggforce", #graphing
"paran", "psych", "GPArotation", #factor analyis
"rmcorr", #repeated measures correlations
"lme4", "lmerTest", "emmeans", #multilevel modelling
"corrplot", #correlation graphing
"jtools", #much faster confint with summ command
"sjPlot", #get results tables
"lavaan",
"semPlot", "semTools", "reshape",
"rjson", "jsonlite", "tidyjson", #convert json
"data.table"
)
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
options(readr.num_columns = 0)
for (thispack in packages) {
library(thispack,character.only=TRUE,quietly=TRUE,verbose=FALSE)
}
#read data
assessment1 <- fromJSON("~/Desktop/MPAS_Fall2021/assessment1.json")
assessment2<- fromJSON("~/Desktop/MPAS_Fall2021/assessment2.json")
assessment3<- fromJSON("~/Desktop/MPAS_Fall2021/assessment3.json")
# Convert to a data frame
#####Assessment1########
assessment1 = as.data.frame(do.call(cbind, assessment1))
assessment1 <- assessment1 %>%
cbind(., do.call('rbind', .$sessions))
#drop unhelpful columns
drops <- c("Block","EventNum","StartTime","Time","TrialNum", "sessions")
assessment1 = assessment1[ , !(names(assessment1) %in% drops)]
names(assessment1)
#NA
assessment1[assessment1 == ""] <- NA                     # Replace blank by NA
#Remove NAs and kept the complete data for each variable
a1 = na.omit(assessment1)
#rename row name based on one column name
rownames(a1) = a1$AuthId
names(a1)
#add a new column
a1$Time = 1
a1 = subset(a1, select = -AuthId)
#####Assessment2########
assessment2 = as.data.frame(do.call(cbind, assessment2))
assessment2 <- assessment2 %>%
cbind(., do.call('rbind', .$sessions))
#drop unhelpful columns
drops <- c("Block","EventNum","StartTime","Time","TrialNum", "sessions")
assessment2 = assessment2[ , !(names(assessment2) %in% drops)]
names(assessment2)
#NA
assessment2[assessment2 == ""] <- NA                     # Replace blank by NA
#Remove NAs and kept the complete data for each variable
a2 = na.omit(assessment2)
#rename row name based on one column name
rownames(a2) = a2$AuthId
names(a2)
#add a new column
a2$Time = 2
a2 = subset(a2, select = -AuthId)
######Assessment3#########
assessment3 = as.data.frame(do.call(cbind, assessment3))
assessment3 <- assessment3 %>%
cbind(., do.call('rbind', .$sessions))
#drop unhelpful columns
drops <- c("Block","EventNum","StartTime","Time","TrialNum", "sessions")
assessment3 = assessment3[ , !(names(assessment3) %in% drops)]
#NA
assessment3[assessment3 == ""] <- NA                     # Replace blank by NA
#Remove NAs and kept the complete data for each variable
a3 = na.omit(assessment3)
#rename row name based on one column name
rownames(a3) = a3$AuthId
names(a3)
#add a new column
a3$Time = 3
a3 = subset(a3, select = -AuthId)
#change into numeric
a1[1:109] = data.frame(sapply(a1[1:109], function(x) as.numeric(as.character(x))))
a2[1:109] = data.frame(sapply(a2[1:109], function(x) as.numeric(as.character(x))))
a3[1:109] = data.frame(sapply(a3[1:109], function(x) as.numeric(as.character(x))))
######CLENAUP participants who missed 2 out of 3 for any assessment#########
#Catch_01 should be 4
#Catch_02 should be 5
#Catch_03 should be 7
#####Assessment 1
a1$Catch_01 <- ifelse(a1$Catch_01 == 4, 1, 0)
a1$Catch_02 <- ifelse(a1$Catch_02 == 5, 1, 0)
a1$Catch_03 <- ifelse(a1$Catch_03 == 7, 1, 0)
a1$CatchSum = a1$Catch_01 + a1$Catch_02 +a1$Catch_03
delete_response_a1 <- subset(a1, CatchSum < 2)
a1_new = a1[!a1$signupid %in% delete_response_a1$signupid,]
#####Assessment 2
a2$Catch_01 <- ifelse(a2$Catch_01 == 4, 1, 0)
a2$Catch_02 <- ifelse(a2$Catch_02 == 5, 1, 0)
a2$Catch_03 <- ifelse(a2$Catch_03 == 7, 1, 0)
a2$CatchSum = a2$Catch_01 + a2$Catch_02 +a2$Catch_03
delete_response_a2 <- subset(a2, CatchSum < 2)
a2_new = a2[!a2$signupid %in% delete_response_a2$signupid,]
#####Assessment 3
a3$Catch_01 <- ifelse(a3$Catch_01 == 4, 1, 0)
a3$Catch_02 <- ifelse(a3$Catch_02 == 5, 1, 0)
a3$Catch_03 <- ifelse(a3$Catch_03 == 7, 1, 0)
a3$CatchSum = a3$Catch_01 + a3$Catch_02 +a3$Catch_03
delete_response_a3 <- subset(a3, CatchSum < 2)
a3_new = a3[!a3$signupid %in% delete_response_a3$signupid,]
a2_new_1 = a2_new[a2_new$signupid %in% a3_new$signupid,]
a1_new_1 = a1_new[a1_new$signupid %in% a2_new_1$signupid,]
a3_new_1 = a3_new[a3_new$signupid %in% a1_new_1$signupid,]
###Combine all 3 together
combined = full_join(a1_new_1, a2_new_1)
combined = full_join(combined, a3_new_1)
names(combined)
#####recode test anxiety scores
##make NO=2 --> 0
combined[87:107] <- ifelse(combined[87:107] == 2, 0, 1)
names(combined)
####Create a total WB variable
combined$WellBeing = combined$PersonalWB_total + combined$SocialWB_total
####Create new Total Anxiety variable
combined$TestAnxiety_total = combined$TestAnxiety_01 + combined$TestAnxiety_02 +
combined$TestAnxiety_03 + combined$TestAnxiety_04 +
combined$TestAnxiety_05 + combined$TestAnxiety_06 +
combined$TestAnxiety_07 + combined$TestAnxiety_08 +
combined$TestAnxiety_09 + combined$TestAnxiety_10 +
combined$TestAnxiety_11 + combined$TestAnxiety_12 +
combined$TestAnxiety_13 + combined$TestAnxiety_14 +
combined$TestAnxiety_15 + combined$TestAnxiety_16 +
combined$TestAnxiety_17 + combined$TestAnxiety_18 +
combined$TestAnxiety_19 + combined$TestAnxiety_20 +
combined$TestAnxiety_21
####Latent Growth Modeling TEST#######
#only keep training days
datalong <- combined[c(combined$Time == 1 | combined$Time == 2 | combined$Time == 3),]
###Decentering only
#First, subsetting a dataset that has only id,day, and decentering
decentering_long <- data.frame(cbind(datalong$signupid,
datalong$Time,
datalong$Decentering))
names(decentering_long) <- c("SignUpID",
"Time",
"Decentering")
decentering_long$SignUpID = datalong$signupid
####Latent Growth Modeling TEST#######
#only keep training days
datalong <- combined[c(combined$Time == 1 | combined$Time == 2 | combined$Time == 3),]
###Decentering only
#First, subsetting a dataset that has only id,day, and decentering
decentering_long <- data.frame(cbind(datalong$signupid,
datalong$Time,
datalong$Decentering))
names(decentering_long) <- c("SignUpID",
"Time",
"Decentering")
decentering_long
datalong$Decentering
#### MPAS 2021Fall Validation Scales#######
#sourcedir = "H:/Shared drives/Yiyi/Study4_Fall2021 (Validate Scales and Paths)"
sourcedir = "~/Desktop/MPAS_Fall2021/"
# Check if required packages are installed ----
packages <- c("tidyverse", "dplyr", "plyr", "tidyr", #data manipulation
"ggplot2", "ggpubr", "ggforce", #graphing
"paran", "psych", "GPArotation", #factor analyis
"rmcorr", #repeated measures correlations
"lme4", "lmerTest", "emmeans", #multilevel modelling
"corrplot", #correlation graphing
"jtools", #much faster confint with summ command
"sjPlot", #get results tables
"lavaan",
"semPlot", "semTools", "reshape",
"rjson", "jsonlite", "tidyjson", #convert json
"data.table"
)
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
options(readr.num_columns = 0)
for (thispack in packages) {
library(thispack,character.only=TRUE,quietly=TRUE,verbose=FALSE)
}
#read data
assessment1 <- fromJSON("~/Desktop/MPAS_Fall2021/assessment1.json")
assessment2<- fromJSON("~/Desktop/MPAS_Fall2021/assessment2.json")
assessment3<- fromJSON("~/Desktop/MPAS_Fall2021/assessment3.json")
# Convert to a data frame
#####Assessment1########
assessment1 = as.data.frame(do.call(cbind, assessment1))
assessment1 <- assessment1 %>%
cbind(., do.call('rbind', .$sessions))
#drop unhelpful columns
drops <- c("Block","EventNum","StartTime","Time","TrialNum", "sessions")
assessment1 = assessment1[ , !(names(assessment1) %in% drops)]
names(assessment1)
#NA
assessment1[assessment1 == ""] <- NA                     # Replace blank by NA
#Remove NAs and kept the complete data for each variable
a1 = na.omit(assessment1)
#rename row name based on one column name
rownames(a1) = a1$AuthId
names(a1)
#add a new column
a1$Time = 1
a1 = subset(a1, select = -AuthId)
#####Assessment2########
assessment2 = as.data.frame(do.call(cbind, assessment2))
assessment2 <- assessment2 %>%
cbind(., do.call('rbind', .$sessions))
#drop unhelpful columns
drops <- c("Block","EventNum","StartTime","Time","TrialNum", "sessions")
assessment2 = assessment2[ , !(names(assessment2) %in% drops)]
names(assessment2)
#NA
assessment2[assessment2 == ""] <- NA                     # Replace blank by NA
#Remove NAs and kept the complete data for each variable
a2 = na.omit(assessment2)
#rename row name based on one column name
rownames(a2) = a2$AuthId
names(a2)
#add a new column
a2$Time = 2
a2 = subset(a2, select = -AuthId)
######Assessment3#########
assessment3 = as.data.frame(do.call(cbind, assessment3))
assessment3 <- assessment3 %>%
cbind(., do.call('rbind', .$sessions))
#drop unhelpful columns
drops <- c("Block","EventNum","StartTime","Time","TrialNum", "sessions")
assessment3 = assessment3[ , !(names(assessment3) %in% drops)]
#NA
assessment3[assessment3 == ""] <- NA                     # Replace blank by NA
#Remove NAs and kept the complete data for each variable
a3 = na.omit(assessment3)
#rename row name based on one column name
rownames(a3) = a3$AuthId
names(a3)
#add a new column
a3$Time = 3
a3 = subset(a3, select = -AuthId)
#change into numeric
a1[1:109] = data.frame(sapply(a1[1:109], function(x) as.numeric(as.character(x))))
a2[1:109] = data.frame(sapply(a2[1:109], function(x) as.numeric(as.character(x))))
a3[1:109] = data.frame(sapply(a3[1:109], function(x) as.numeric(as.character(x))))
######CLENAUP participants who missed 2 out of 3 for any assessment#########
#Catch_01 should be 4
#Catch_02 should be 5
#Catch_03 should be 7
#####Assessment 1
a1$Catch_01 <- ifelse(a1$Catch_01 == 4, 1, 0)
a1$Catch_02 <- ifelse(a1$Catch_02 == 5, 1, 0)
a1$Catch_03 <- ifelse(a1$Catch_03 == 7, 1, 0)
a1$CatchSum = a1$Catch_01 + a1$Catch_02 +a1$Catch_03
delete_response_a1 <- subset(a1, CatchSum < 2)
a1_new = a1[!a1$signupid %in% delete_response_a1$signupid,]
#####Assessment 2
a2$Catch_01 <- ifelse(a2$Catch_01 == 4, 1, 0)
a2$Catch_02 <- ifelse(a2$Catch_02 == 5, 1, 0)
a2$Catch_03 <- ifelse(a2$Catch_03 == 7, 1, 0)
a2$CatchSum = a2$Catch_01 + a2$Catch_02 +a2$Catch_03
delete_response_a2 <- subset(a2, CatchSum < 2)
a2_new = a2[!a2$signupid %in% delete_response_a2$signupid,]
#####Assessment 3
a3$Catch_01 <- ifelse(a3$Catch_01 == 4, 1, 0)
a3$Catch_02 <- ifelse(a3$Catch_02 == 5, 1, 0)
a3$Catch_03 <- ifelse(a3$Catch_03 == 7, 1, 0)
a3$CatchSum = a3$Catch_01 + a3$Catch_02 +a3$Catch_03
delete_response_a3 <- subset(a3, CatchSum < 2)
a3_new = a3[!a3$signupid %in% delete_response_a3$signupid,]
a2_new_1 = a2_new[a2_new$signupid %in% a3_new$signupid,]
a1_new_1 = a1_new[a1_new$signupid %in% a2_new_1$signupid,]
a3_new_1 = a3_new[a3_new$signupid %in% a1_new_1$signupid,]
###Combine all 3 together
combined = full_join(a1_new_1, a2_new_1)
combined = full_join(combined, a3_new_1)
names(combined)
#####recode test anxiety scores
##make NO=2 --> 0
combined[87:107] <- ifelse(combined[87:107] == 2, 0, 1)
names(combined)
####Create a total WB variable
combined$WellBeing = combined$PersonalWB_total + combined$SocialWB_total
####Create new Total Anxiety variable
combined$TestAnxiety_total = combined$TestAnxiety_01 + combined$TestAnxiety_02 +
combined$TestAnxiety_03 + combined$TestAnxiety_04 +
combined$TestAnxiety_05 + combined$TestAnxiety_06 +
combined$TestAnxiety_07 + combined$TestAnxiety_08 +
combined$TestAnxiety_09 + combined$TestAnxiety_10 +
combined$TestAnxiety_11 + combined$TestAnxiety_12 +
combined$TestAnxiety_13 + combined$TestAnxiety_14 +
combined$TestAnxiety_15 + combined$TestAnxiety_16 +
combined$TestAnxiety_17 + combined$TestAnxiety_18 +
combined$TestAnxiety_19 + combined$TestAnxiety_20 +
combined$TestAnxiety_21
#######LM Analysis##########
#######Decentering#########
lmDecentering = lm(Decenter_total ~ Time, combined)
summary(lmDecentering)
ggplot(data = combined, aes(x = Time, y = Decenter_total, color=Time)) +
geom_jitter() +
geom_smooth(method = "lm")
#######Reappraisal##########
lmReappraisal = lm(Reappraisal_total ~ Time, combined)
summary(lmReappraisal)
ggplot(data = combined, aes(x = Time, y = Reappraisal_total, color=Time)) +
geom_jitter() +
geom_smooth(method = "lm")
#######Personal WB##########
lmPersonalWB = lm(PersonalWB_total ~ Time, combined)
summary(lmPersonalWB)
ggplot(data = combined, aes(x = Time, y = PersonalWB_total, color=Time)) +
geom_jitter() +
geom_smooth(method = "lm")
#######Social WB##########
lmSocialWB = lm(SocialWB_total ~ Time, combined)
summary(lmSocialWB)
ggplot(data = combined, aes(x = Time, y = SocialWB_total, color=Time)) +
geom_jitter() +
geom_smooth(method = "lm")
#####Total Well Being#########
lmWellBeing = lm(WellBeing ~ Time, combined)
summary(lmWellBeing)
ggplot(data = combined, aes(x = Time, y = WellBeing, color=Time)) +
geom_jitter() +
geom_smooth(method = "lm")
#####Stress#########
lmStress = lm(Stress ~ Time, combined)
summary(lmStress)
ggplot(data = combined, aes(x = Time, y = Stress, color=Time)) +
geom_jitter() +
geom_smooth(method = "lm")
#######Test Anxiety########
lmTestAnxiety = lm(TestAnxiety_total ~ Time, combined)
summary(lmTestAnxiety)
ggplot(data = combined, aes(x = Time, y = TestAnxiety_total, color=Time)) +
geom_jitter() +
geom_smooth(method = "lm")
names(combined)
###correlation between test anxiety score and number of evaluations
library(rmcorr)
combined$signupid = factor(combined$signupid)
rm = rmcorr(participant = signupid, measure1 = TestAnxiety_numberoftest,
measure2 = TestAnxiety_total, dataset = combined)
rm
plot(rm)
ggplot(sessdata, aes(x = PosAffect, y = Motivation)) +
geom_point() + guides(color=FALSE) +
geom_smooth(method = "lm")
################################
##############SEM###############
################################
###Renaming variable names for SEM models######
names(combined)[names(combined) == 'Decenter_total'] <- 'Decentering'
names(combined)[names(combined) == 'Reappraisal_total'] <- 'Reappraisal'
names(combined)[names(combined) == 'PersonalWB_total'] <- 'PersonalWB'
names(combined)[names(combined) == 'SocialWB_total'] <- 'SocialWB'
names(combined)[names(combined) == 'TestAnxiety_total'] <- 'TestAnxiety'
##### Pre-registered Model#######
# H1: Well-being and moderating variables are plastic;
# Stressors impact all levels)
# Stressors will negative impact Decentering, Reappraisal, and Well-Being,
# and increase test anxiety
h1_model = '
# Paths predicting the intermediary endogenous variable
#direct effect
Decentering ~ a1*Stress
Reappraisal ~ a2*Stress
WellBeing ~ a3*Stress
TestAnxiety ~ a4*Stress
Reappraisal ~ b*Decentering
WellBeing ~ c*Reappraisal
WellBeing ~ d*TestAnxiety
'
h1.analysis = sem(h1_model, data = combined) #se = "bootstrap"
summary(h1.analysis, fit.measures=TRUE, standardized=TRUE)
diagram.h1 = semPaths(h1.analysis, what= "std", whatLabels="std", rotation=3,
nCharNodes=0, label.cex=2, trans=FALSE, fade=FALSE)
#get CI for std estimates
standardizedSolution(h1.analysis, type = "std.all")
####Latent Growth Modeling TEST#######
#only keep training days
datalong <- combined[c(combined$Time == 1 | combined$Time == 2 | combined$Time == 3),]
###Decentering only
#First, subsetting a dataset that has only id,day, and decentering
decentering_long <- data.frame(cbind(datalong$signupid,
datalong$Time,
datalong$Decentering))
names(decentering_long) <- c("SignUpID",
"Time",
"Decentering")
decentering_long$SignUpID = datalong$signupid
#Second, use dplyr to change decentering and reappraisal to wide format
decentering_wide <- reshape(decentering_long,
idvar = "SignUpID",
timevar = "Time",
direction = "wide")
colMeans(decentering_wide[-1], na.rm = T)
#mean latent intercept that is allowed to vary, mean latent slope that is allowed to vary, and contrained residual variances
model = '
#intercept
i =~ 1*Decentering.1 + 1*Decentering.2 +  1*Decentering.3
s =~ 1*Decentering.1 + 2*Decentering.2 +  3*Decentering.3
#factor variances (random intercept and random slope)
i ~~ i
s ~~ s
#covariances among factos
i ~~ s #variance between intercept and slope of Decentering scores
#residual variances: variances of observed variables (made equivalent by naming r)
Decentering.1 ~~ r*Decentering.1
Decentering.2 ~~ r*Decentering.2
Decentering.3 ~~ r*Decentering.3
'
###something wrong here
#use sem()
fit.time.varying <- sem(model,
data=decentering_wide,
missing         = "fiml",
estimator       = "ml"
)
#mean latent intercept that is allowed to vary, mean latent slope that is allowed to vary, and contrained residual variances
model = '
#intercept
i =~ 1*Decentering.1 + 1*Decentering.2 +  1*Decentering.3
s =~ 1*Decentering.1 + 8*Decentering.2 +  15*Decentering.3
#factor variances (random intercept and random slope)
i ~~ i
s ~~ s
#covariances among factos
i ~~ s #variance between intercept and slope of Decentering scores
#residual variances: variances of observed variables (made equivalent by naming r)
Decentering.1 ~~ r*Decentering.1
Decentering.2 ~~ r*Decentering.2
Decentering.3 ~~ r*Decentering.3
'
###something wrong here
#use sem()
fit.time.varying <- sem(model,
data=decentering_wide,
missing         = "fiml",
estimator       = "ml"
)
summary(fit.time.varying, standardized = TRUE, fit.measures = TRUE)
diagram.h1 = semPaths(fit.time.varying, what= "std", whatLabels="std", rotation=1,
nCharNodes=0, label.cex=2, trans=FALSE, fade=FALSE)
